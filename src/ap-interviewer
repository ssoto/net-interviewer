#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import time
import json
import os
from pprint import pprint
from snmp.table import Snmp_table_request
import sys

from logstash.udp import Sender
from utils.ip_manager import get_decimal_ip
from utils.color_print import error, success


import logging
logging.basicConfig(format='%(asctime)s - %(pathname)s:%(lineno)d : %(levelname)s : %(message)s', level=logging.DEBUG)

def parse_args():

    parser = argparse.ArgumentParser()

    parser.add_argument('-p', '--port', dest='port',
                        default='161', action='store',
                        help='port to send snmp command')

    parser.add_argument('-s', '--server', dest='server', required=True,
                        help='server to send snmp command')

    parser.add_argument('-c', '--community', dest='community', required=True,
                        help='snmp community field')

    parser.add_argument('-sv', '--snmpversion', dest='snmp_version', 
                        default='2c', help='snmp version')

    parser.add_argument('-m', '--mib-name', dest='mib_name', required=True,
                        help='mib name')

    parser.add_argument('-o', '--oids', required=True,
                        type=str, nargs='+',
                        dest='oids',  help='list of oids')

    parser.add_argument('-w', '--write_output', dest='file_name', 
                        help='if passed, snmp output are writed on the file')

    parser.add_argument('-ls', '--ls-host', dest='logstash_host',
                        type=str, help='logstash address to send output')

    parser.add_argument('-lgp', '--ls-port', dest='logstash_port',
                        type=int, help='UDP port of logstash to send json message')

        
    args_parsed = parser.parse_args()

    logging.debug('options passed to the application: %s' % args_parsed)

    # check file to output to print
    if hasattr(args_parsed, 'file_name') and args_parsed.file_name:
        try: 
            open(args_parsed.file_name)
        except IOError as e:
            error("Error with file to write request output: " + args_parsed.file_path)
            sys.exit(0)
    
    if hasattr(args_parsed, 'logstash_host') and args_parsed.logstash_host:
        if not hasattr(args_parsed, 'logstash_port') and args_parsed.logstash_port: 
            error("Logstash host and port are needed")
            sys.exit(0)

    return args_parsed

def append_field(data, original_ds, destination_ds, field):
    """
    Try add a new field on destination_ds for each element in 
    destination_ds with same key. 

    >>> print data
    data  = {
        original_ds : {
            key_a : {
                target_field: value
                ...
            }
        },
        destination_ds : {
            key_a : {
                ...
            }
        } 
    }
    >>> append_field (data, "original_ds", "destination_ds", "target_field") 
    >>> print data
    data  = {
        original_ds : {
            key_a : {
                target_field: value
                ...
            }
        },
        destination_ds : {
            key_a : {
                target_field: value
                ...
            }
        } 
    }

    """
    for ident in data[destination_ds].keys():
        ip_address = data[original_ds][ident][field]
        data[destination_ds][ident][field] = ip_address

def write_on_file (file_name, object_data):
    with open(file_name, 'w') as outfile:
        json.dump(object_data, outfile, indent=2)

def work():

    args = parse_args()
    data_dict = { }

    for oid in args.oids:

        OID_req = Snmp_table_request( server = args.server, 
                                     community = args.community, 
                                     snmp_version = args.snmp_version,
                                     port = args.port,
                                     mib_name = args.mib_name, 
                                     oid_name = oid)
        try:
            OID_req.request()
        except Exception as excep:
            error("Error on request " + args.mib_name + '::' + oid )
            break
        table_dict = OID_req.get_json_reply()
        
        if oid == 'cDot11ClientConfigInfoTable':
            for index in table_dict:
                element = table_dict[index]
                element['IpAddress'] = get_decimal_ip(element['IpAddress'])
        
        mib_oid_name = args.mib_name+"::"+oid 
        
        data_dict[mib_oid_name] = table_dict

    # add ip field from 
    append_field(data=data_dict, 
                 original_ds='CISCO-DOT11-ASSOCIATION-MIB::cDot11ClientConfigInfoTable',
                 destination_ds='CISCO-DOT11-ASSOCIATION-MIB::cDot11ClientStatisticTable',
                 field='IpAddress')

    if hasattr(args, 'file_path'):
        success("Request done successfully, output json writed on " + args.file_name)
        write_on_file( file_name=args.file_name, 
                       object_data = data_dict)

    if hasattr(args, 'logstash_host') and args.logstash_host and \
        hasattr(args,'logstash_port') and args.logstash_port:
        s = Sender(args.logstash_host, args.logstash_port)
        snmp_data = data_dict["CISCO-DOT11-ASSOCIATION-MIB::cDot11ClientStatisticTable"]
        logging.debug("sending CISCO-DOT11-ASSOCIATION-MIB::cDot11ClientStatisticTable info")
        for element in snmp_data.keys():
            s.send_dict(snmp_data[element])
        logging.debug("sent info")
    else:
        logging.debug("Information hasn't be sent.")


if __name__ == '__main__':
    while True:
        work()
        time.sleep(15)


    